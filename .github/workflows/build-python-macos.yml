# This is a basic workflow to help you get started with Actions

name: Python CI MacOS

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  push:
    branches: [ mac-os-test ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-macos:
    # The type of runner that the job will run on
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.7]
        # python-version: [2.7, 3.5, 3.6, 3.7, 3.8]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Checkout submodules
      shell: bash
      run: |
        # If your submodules are configured to use SSH instead of HTTPS please uncomment the following line
        # git config --global url."https://github.com/".insteadOf "git@github.com:"
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
        
    #- name: Install Dependencies for glfw
    #  run: sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libgl-dev
    
    # Set up python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    # Install dependencies
    - name: Install dependencies
      run: python -m pip install --upgrade pip setuptools wheel twine

    # Change directory and run setup py
    - name: Run setup py
      run: python setup.py bdist_wheel

    # Upload artifacts
    - name: Upload compiled wheel as artifact
      uses: actions/upload-artifact@master
      with:
        name: pymeshview-ubuntu-${{ matrix.python-version }}
        path: build/dist
      if: always()

    # Upload wheel to pypi
    - name: Upload wheel to pypi
      env:
       TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
       TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: twine upload build/dist/* --skip-existing
